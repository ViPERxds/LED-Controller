"""
LED Controller - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ CustomTkinter
"""

import asyncio
import customtkinter as ctk
from tkinter import colorchooser, messagebox
from bleak import BleakScanner, BleakClient
import threading
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")


class LEDController:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LED –ª–µ–Ω—Ç–æ–π —á–µ—Ä–µ–∑ Bluetooth"""
    
    def __init__(self):
        self.client: Optional[BleakClient] = None
        self.device_address: Optional[str] = None
        self.write_characteristics = []
        self.device_name: str = ""
        
    async def scan_devices(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        devices = await BleakScanner.discover(timeout=10.0)
        return [(d.name or "Unknown", d.address) for d in devices if d.name]
    
    async def connect(self, address: str, device_name: str = ""):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        try:
            self.client = BleakClient(address)
            await self.client.connect()
            self.device_address = address
            self.device_name = device_name
            
            self.write_characteristics = []
            print(f"\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ ===")
            print(f"–ò–º—è: {device_name}")
            print(f"–ê–¥—Ä–µ—Å: {address}")
            
            for service in self.client.services:
                for char in service.characteristics:
                    if "write" in char.properties or "write-without-response" in char.properties:
                        self.write_characteristics.append(char.uuid)
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if self.client and self.client.is_connected:
            await self.client.disconnect()
    
    async def send_command(self, data: bytearray):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        if not self.client or not self.client.is_connected:
            return False
        
        for char_uuid in self.write_characteristics:
            try:
                await self.client.write_gatt_char(char_uuid, data, response=False)
                return True
            except:
                pass
        return False
    
    async def send_color(self, r: int, g: int, b: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–≤–µ—Ç–∞ –Ω–∞ –ª–µ–Ω—Ç—É"""
        data = bytearray([0x7E, 0x07, 0x05, 0x03, r, g, b, 0x10, 0xEF])
        return await self.send_command(data)
    
    async def set_brightness(self, brightness: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏ (0-100)"""
        brightness_val = int(brightness * 0.64)
        if brightness_val > 64:
            brightness_val = 64
        data = bytearray([0x7E, 0x04, 0x01, brightness_val, 0xFF, 0xFF, 0xFF, 0x00, 0xEF])
        return await self.send_command(data)
    
    async def power_on(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã"""
        data = bytearray([0x7E, 0x04, 0x04, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0xEF])
        return await self.send_command(data)
    
    async def power_off(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã"""
        data = bytearray([0x7E, 0x04, 0x04, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xEF])
        return await self.send_command(data)


class LEDControllerApp:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π GUI –Ω–∞ CustomTkinter"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("LED Controller")
        self.root.geometry("700x900")
        
        self.controller = LEDController()
        self.loop = asyncio.new_event_loop()
        self.current_color = (255, 255, 255)
        self.selected_device_idx = None
        
        self.create_ui()
        
        # –ó–∞–ø—É—Å–∫ asyncio
        self.thread = threading.Thread(target=self.run_asyncio_loop, daemon=True)
        self.thread.start()
    
    def run_asyncio_loop(self):
        """–ó–∞–ø—É—Å–∫ asyncio event loop"""
        asyncio.set_event_loop(self.loop)
        self.loop.run_forever()
    
    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ctk.CTkFrame(self.root, height=80, corner_radius=0)
        header.pack(fill="x", padx=0, pady=0)
        header.pack_propagate(False)
        
        ctk.CTkLabel(header, 
                    text="üí° LED Controller",
                    font=ctk.CTkFont(size=28, weight="bold")).pack(pady=25)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º
        container = ctk.CTkScrollableFrame(self.root, fg_color="transparent")
        container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ü–∞–Ω–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.create_connection_panel(container)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–º
        self.create_color_panel(container)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_panel(container)
    
    def create_connection_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        frame = ctk.CTkFrame(parent)
        frame.pack(fill="x", pady=(0, 15))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(frame, 
                    text="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", padx=15, pady=(15, 10))
        
        # –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è radiobuttons)
        self.device_list_frame = ctk.CTkScrollableFrame(frame, 
                                                        height=100,
                                                        fg_color="#2b2b2b")
        self.device_list_frame.pack(fill="x", padx=15, pady=(0, 10))
        
        # –ó–∞–≥–ª—É—à–∫–∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.no_devices_label = ctk.CTkLabel(self.device_list_frame,
                                            text="–ù–∞–∂–º–∏—Ç–µ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...",
                                            font=ctk.CTkFont(size=11),
                                            text_color="gray")
        self.no_devices_label.pack(pady=20)
        
        self.device_radio_var = ctk.IntVar(value=-1)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ctk.CTkFrame(frame, fg_color="transparent")
        btn_frame.pack(fill="x", padx=15, pady=(0, 10))
        
        self.scan_btn = ctk.CTkButton(btn_frame, 
                                     text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å",
                                     command=self.scan_devices,
                                     height=35,
                                     font=ctk.CTkFont(size=13))
        self.scan_btn.pack(side="left", padx=(0, 10))
        
        self.connect_btn = ctk.CTkButton(btn_frame, 
                                        text="‚ö° –ü–æ–¥–∫–ª—é—á–∏—Ç—å",
                                        command=self.connect_device,
                                        height=35,
                                        font=ctk.CTkFont(size=13))
        self.connect_btn.pack(side="left", padx=(0, 10))
        
        self.disconnect_btn = ctk.CTkButton(btn_frame, 
                                           text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å",
                                           command=self.disconnect_device,
                                           height=35,
                                           fg_color="#dc3545",
                                           hover_color="#c82333",
                                           font=ctk.CTkFont(size=13),
                                           state="disabled")
        self.disconnect_btn.pack(side="left")
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ctk.CTkLabel(frame, 
                                        text="‚óè –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ",
                                        font=ctk.CTkFont(size=12),
                                        text_color="#dc3545")
        self.status_label.pack(anchor="w", padx=15, pady=(0, 15))
        
        self.devices = []
    
    def create_color_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞"""
        frame = ctk.CTkFrame(parent)
        frame.pack(fill="both", expand=True, pady=(0, 15))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(frame, 
                    text="üé® –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞",
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", padx=15, pady=(15, 10))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é –∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤
        color_container = ctk.CTkFrame(frame, fg_color="transparent")
        color_container.pack(fill="both", expand=True, padx=15)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ø—Ä–µ–≤—å—é
        left_frame = ctk.CTkFrame(color_container, fg_color="transparent")
        left_frame.pack(side="left", fill="y", padx=(0, 15))
        
        ctk.CTkLabel(left_frame, 
                    text="–ü—Ä–µ–≤—å—é",
                    font=ctk.CTkFont(size=12)).pack(pady=(0, 10))
        
        self.color_preview = ctk.CTkFrame(left_frame, 
                                         width=180, 
                                         height=180,
                                         fg_color="#FFFFFF",
                                         corner_radius=10)
        self.color_preview.pack()
        self.color_preview.pack_propagate(False)
        
        self.hex_label = ctk.CTkLabel(left_frame, 
                                     text="#FFFFFF",
                                     font=ctk.CTkFont(size=16, weight="bold"))
        self.hex_label.pack(pady=(10, 0))
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å–ª–∞–π–¥–µ—Ä—ã RGB
        right_frame = ctk.CTkFrame(color_container, fg_color="transparent")
        right_frame.pack(side="left", fill="both", expand=True)
        
        self.rgb_sliders = {}
        colors = [('R', '#ff4444'), ('G', '#44ff44'), ('B', '#4444ff')]
        
        for i, (label, color) in enumerate(colors):
            slider_frame = ctk.CTkFrame(right_frame, fg_color="transparent")
            slider_frame.pack(fill="x", pady=10)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–µ—Ä–∞
            header_frame = ctk.CTkFrame(slider_frame, fg_color="transparent")
            header_frame.pack(fill="x", pady=(0, 5))
            
            ctk.CTkLabel(header_frame, 
                        text=label,
                        font=ctk.CTkFont(size=14, weight="bold"),
                        text_color=color).pack(side="left")
            
            value_label = ctk.CTkLabel(header_frame, 
                                      text="255",
                                      font=ctk.CTkFont(size=13),
                                      width=40)
            value_label.pack(side="right")
            
            # –°–ª–∞–π–¥–µ—Ä
            slider = ctk.CTkSlider(slider_frame,
                                  from_=0,
                                  to=255,
                                  number_of_steps=255,
                                  command=lambda v, lbl=value_label, idx=i: self.on_rgb_change(v, lbl, idx),
                                  state="disabled")
            slider.set(255)
            slider.pack(fill="x")
            
            self.rgb_sliders[label] = (slider, value_label)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        color_btn_frame = ctk.CTkFrame(frame, fg_color="transparent")
        color_btn_frame.pack(fill="x", padx=15, pady=(10, 0))
        
        self.color_picker_btn = ctk.CTkButton(color_btn_frame,
                                             text="üé® –í—ã–±—Ä–∞—Ç—å –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã",
                                             command=self.choose_color,
                                             height=35,
                                             state="disabled")
        self.color_picker_btn.pack(side="left", padx=(0, 10))
        
        # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
        ctk.CTkLabel(frame, 
                    text="–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä",
                    font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(15, 5))
        
        preset_frame = ctk.CTkFrame(frame, fg_color="transparent")
        preset_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        presets = [
            ("–ö—Ä–∞—Å–Ω—ã–π", "#FF0000"),
            ("–ó–µ–ª–µ–Ω—ã–π", "#00FF00"),
            ("–°–∏–Ω–∏–π", "#0000FF"),
            ("–ñ–µ–ª—Ç—ã–π", "#FFFF00"),
            ("–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "#FF00FF"),
            ("–ì–æ–ª—É–±–æ–π", "#00FFFF"),
            ("–ë–µ–ª—ã–π", "#FFFFFF"),
            ("–û—Ä–∞–Ω–∂–µ–≤—ã–π", "#FF8800")
        ]
        
        self.preset_buttons = []
        for i, (name, color) in enumerate(presets):
            btn = ctk.CTkButton(preset_frame,
                              text="",
                              width=60,
                              height=30,
                              fg_color=color,
                              hover_color=color,
                              command=lambda c=color: self.set_preset_color(c),
                              state="disabled")
            btn.grid(row=0, column=i, padx=3)
            self.preset_buttons.append(btn)
    
    def create_control_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç—å—é –∏ –ø–∏—Ç–∞–Ω–∏–µ–º"""
        frame = ctk.CTkFrame(parent)
        frame.pack(fill="x")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(frame, 
                    text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", padx=15, pady=(15, 10))
        
        # –Ø—Ä–∫–æ—Å—Ç—å
        brightness_frame = ctk.CTkFrame(frame, fg_color="transparent")
        brightness_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        header_frame = ctk.CTkFrame(brightness_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(0, 5))
        
        ctk.CTkLabel(header_frame, 
                    text="üí° –Ø—Ä–∫–æ—Å—Ç—å",
                    font=ctk.CTkFont(size=14)).pack(side="left")
        
        self.brightness_value = ctk.CTkLabel(header_frame, 
                                            text="100%",
                                            font=ctk.CTkFont(size=13))
        self.brightness_value.pack(side="right")
        
        self.brightness_slider = ctk.CTkSlider(brightness_frame,
                                              from_=0,
                                              to=100,
                                              number_of_steps=100,
                                              command=self.on_brightness_change,
                                              state="disabled")
        self.brightness_slider.set(100)
        self.brightness_slider.pack(fill="x")
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
        power_frame = ctk.CTkFrame(frame, fg_color="transparent")
        power_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        self.power_on_btn = ctk.CTkButton(power_frame,
                                         text="‚ö° –í–∫–ª—é—á–∏—Ç—å",
                                         command=self.power_on,
                                         height=40,
                                         fg_color="#28a745",
                                         hover_color="#218838",
                                         font=ctk.CTkFont(size=14, weight="bold"),
                                         state="disabled")
        self.power_on_btn.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        self.power_off_btn = ctk.CTkButton(power_frame,
                                          text="üîå –í—ã–∫–ª—é—á–∏—Ç—å",
                                          command=self.power_off,
                                          height=40,
                                          fg_color="#dc3545",
                                          hover_color="#c82333",
                                          font=ctk.CTkFont(size=14, weight="bold"),
                                          state="disabled")
        self.power_off_btn.pack(side="left", fill="x", expand=True)
    
    def on_rgb_change(self, value, label, index):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ RGB —Å–ª–∞–π–¥–µ—Ä–∞"""
        value = int(value)
        label.configure(text=str(value))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–≤–µ—Ç
        colors = list(self.current_color)
        colors[index] = value
        self.current_color = tuple(colors)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        self.update_color_preview()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–µ–Ω—Ç—É
        asyncio.run_coroutine_threadsafe(
            self.controller.send_color(*self.current_color), self.loop
        )
    
    def on_brightness_change(self, value):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏"""
        value = int(value)
        self.brightness_value.configure(text=f"{value}%")
        
        asyncio.run_coroutine_threadsafe(
            self.controller.set_brightness(value), self.loop
        )
    
    def update_color_preview(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ü–≤–µ—Ç–∞"""
        hex_color = '#{:02x}{:02x}{:02x}'.format(*self.current_color)
        self.color_preview.configure(fg_color=hex_color)
        self.hex_label.configure(text=hex_color.upper())
    
    def choose_color(self):
        """–í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø–∞–ª–∏—Ç—Ä—É"""
        color = colorchooser.askcolor(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç")
        if color[0]:
            r, g, b = map(int, color[0])
            self.set_color(r, g, b)
    
    def set_preset_color(self, hex_color):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞"""
        r = int(hex_color[1:3], 16)
        g = int(hex_color[3:5], 16)
        b = int(hex_color[5:7], 16)
        self.set_color(r, g, b)
    
    def set_color(self, r, g, b):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞"""
        self.current_color = (r, g, b)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä—ã
        self.rgb_sliders['R'][0].set(r)
        self.rgb_sliders['G'][0].set(g)
        self.rgb_sliders['B'][0].set(b)
        
        self.rgb_sliders['R'][1].configure(text=str(r))
        self.rgb_sliders['G'][1].configure(text=str(g))
        self.rgb_sliders['B'][1].configure(text=str(b))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        self.update_color_preview()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–µ–Ω—Ç—É
        asyncio.run_coroutine_threadsafe(
            self.controller.send_color(r, g, b), self.loop
        )
    
    def scan_devices(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for widget in self.device_list_frame.winfo_children():
            widget.destroy()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        scanning_label = ctk.CTkLabel(self.device_list_frame,
                                     text="‚è≥ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...",
                                     font=ctk.CTkFont(size=11))
        scanning_label.pack(pady=20)
        
        self.scan_btn.configure(state="disabled")
        self.selected_device_idx = None
        
        def scan():
            devices = asyncio.run_coroutine_threadsafe(
                self.controller.scan_devices(), self.loop
            ).result()
            self.root.after(0, self.update_device_list, devices)
        
        threading.Thread(target=scan, daemon=True).start()
    
    def update_device_list(self, devices):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        self.devices = devices
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for widget in self.device_list_frame.winfo_children():
            widget.destroy()
        
        if not devices:
            no_dev_label = ctk.CTkLabel(self.device_list_frame,
                                       text="‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                                       font=ctk.CTkFont(size=11),
                                       text_color="#dc3545")
            no_dev_label.pack(pady=20)
        else:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self.device_radio_var.set(-1)
            self.device_buttons = []
            
            for i, (name, address) in enumerate(devices):
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                btn = ctk.CTkButton(self.device_list_frame,
                                   text=f"üì± {name}\n    {address}",
                                   font=ctk.CTkFont(size=11),
                                   height=60,
                                   anchor="w",
                                   fg_color="#2b2b2b",
                                   hover_color="#3a3a3a",
                                   border_width=2,
                                   border_color="#3a3a3a",
                                   command=lambda idx=i: self.select_device(idx))
                btn.pack(fill="x", padx=5, pady=3)
                self.device_buttons.append(btn)
        
        self.scan_btn.configure(state="normal")
    
    def select_device(self, idx):
        """–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        self.selected_device_idx = idx
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        for i, btn in enumerate(self.device_buttons):
            if i == idx:
                # –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
                btn.configure(fg_color="#1f6feb", 
                            border_color="#1f6feb",
                            text_color="white")
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ - –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å
                btn.configure(fg_color="#2b2b2b", 
                            border_color="#3a3a3a",
                            text_color="white")
    
    def connect_device(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        if not self.devices:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            return
        
        if self.selected_device_idx is None:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        device_name, address = self.devices[self.selected_device_idx]
        
        self.status_label.configure(text="‚óè –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", text_color="#ffc107")
        self.connect_btn.configure(state="disabled")
        
        def connect():
            success = asyncio.run_coroutine_threadsafe(
                self.controller.connect(address, device_name), self.loop
            ).result()
            self.root.after(0, self.on_connection_result, success)
        
        threading.Thread(target=connect, daemon=True).start()
    
    def on_connection_result(self, success):
        """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if success:
            self.status_label.configure(text="‚óè –ü–æ–¥–∫–ª—é—á–µ–Ω–æ ‚úì", text_color="#28a745")
            self.disconnect_btn.configure(state="normal")
            
            # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            for slider, _ in self.rgb_sliders.values():
                slider.configure(state="normal")
            
            self.brightness_slider.configure(state="normal")
            self.color_picker_btn.configure(state="normal")
            self.power_on_btn.configure(state="normal")
            self.power_off_btn.configure(state="normal")
            
            for btn in self.preset_buttons:
                btn.configure(state="normal")
        else:
            self.status_label.configure(text="‚óè –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", text_color="#dc3545")
            self.connect_btn.configure(state="normal")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É")
    
    def disconnect_device(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        asyncio.run_coroutine_threadsafe(self.controller.disconnect(), self.loop)
        
        self.status_label.configure(text="‚óè –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", text_color="#dc3545")
        self.connect_btn.configure(state="normal")
        self.disconnect_btn.configure(state="disabled")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for slider, _ in self.rgb_sliders.values():
            slider.configure(state="disabled")
        
        self.brightness_slider.configure(state="disabled")
        self.color_picker_btn.configure(state="disabled")
        self.power_on_btn.configure(state="disabled")
        self.power_off_btn.configure(state="disabled")
        
        for btn in self.preset_buttons:
            btn.configure(state="disabled")
    
    def power_on(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã"""
        asyncio.run_coroutine_threadsafe(self.controller.power_on(), self.loop)
    
    def power_off(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã"""
        asyncio.run_coroutine_threadsafe(self.controller.power_off(), self.loop)


def main():
    root = ctk.CTk()
    app = LEDControllerApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()
